@page "/admin/plugins/postcommentsettings"
@using MediatR
@using BlogFodder.Core.Plugins.Commands
@using BlogFodder.Core.Plugins.Models
@using BlogFodder.Core.Extensions
@using BlogFodder.Plugins.Comments.Models
@using Humanizer
@layout AdminLayout

<PageTitle>Post Comment Settings</PageTitle>
@if (Errors.Length > 0)
{
    <MudAlert Severity="Severity.Error" Class="my-2">
        @foreach (var error in Errors)
        {
            <MudText>@error</MudText>
        }
    </MudAlert>
}
<MudForm Model="@Settings" @ref="@Form" @bind-Errors="@Errors" ValidationDelay="0">
    <MudGrid Class="pb-3">
                <MudItem xs="12">
                    <MudSwitch Label="Enable this plugin" Color="Color.Primary" Size="Size.Large"
                               @bind-Checked="Settings.Enabled" For="@(() => Settings.Enabled)"/>
                </MudItem>
    </MudGrid>
    <MudTabs Outlined="true" Position="Position.Top" Rounded="true" Border="true" KeepPanelsAlive="true" ApplyEffectsToContainer="true" PanelClass="pa-6">

        <MudTabPanel Text="Settings">
            <MudGrid>
                <MudItem xs="12">
                    <MudSwitch Label="Manually Approve Comments" Color="Color.Primary"
                               @bind-Checked="Settings.ManuallyApproveComments"
                               For="@(() => Settings.ManuallyApproveComments)"/>
                </MudItem>
                <MudItem xs="12">
                    <MudSwitch Label="Enable Akismet Spam Filtering" Color="Color.Primary"
                               @bind-Checked="Settings.EnableAkismetSpamCheck" For="@(() => Settings.Enabled)"/>
                </MudItem>
            </MudGrid>

        </MudTabPanel>
        @if (Settings.CommentsToApprove.Any())
        {
            <MudTabPanel Text="Awaiting Approval" BadgeData="@Settings.CommentsToApprove.Count" BadgeColor="Color.Info">

                <MudGrid Class="mt-8">
                    @foreach (var comment in Settings.CommentsToApprove.OrderByDescending(x => x.DateCreated))
                    {
                        <MudItem xs="12" Class="mb-4">
                            <MudCard Elevation="2" Class="rounded-lg" Style="@_customCardStyle">
                                <MudCardContent Class="d-flex align-center flex-grow-1 gap-4">
                                    <div class="flex-grow-1">
                                        <div style="color: @Colors.BlueGrey.Lighten1">
                                            <MudText Typo="Typo.subtitle2">Name Here</MudText>
                                        </div>
                                        <MudText Typo="Typo.body1">@comment.Comment</MudText>
                                        <div style="color: @Colors.BlueGrey.Lighten1">
                                            <MudText Typo="Typo.body2">@comment.DateCreated.Humanize()</MudText>
                                        </div>
                                    </div>
                                    <MudFab Color="Color.Success" StartIcon="@Icons.Material.Filled.CheckCircle" Size="Size.Large" OnClick="() => ApproveComment(comment)"/>
                                    <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Outlined.RemoveCircleOutline" Size="Size.Large" OnClick="() => Settings.CommentsToApprove.Remove(comment)"/>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>

            </MudTabPanel>
        }
        @if (Settings.FlaggedComments.Any())
        {
            <MudTabPanel Text="Flagged Comments" BadgeData="@Settings.FlaggedComments.Count" BadgeColor="Color.Error">

                <MudGrid Class="mt-8">
                    @foreach (var comment in Settings.FlaggedComments.OrderByDescending(x => x.DateCreated))
                    {
                        <MudItem xs="12" Class="mb-4">
                            <MudCard Elevation="2" Class="rounded-lg" Style="@_customCardStyle">
                                <MudCardContent Class="d-flex align-center flex-grow-1 gap-4">
                                    <div class="flex-grow-1">
                                        <div style="color: @Colors.BlueGrey.Lighten1">
                                            <MudText Typo="Typo.subtitle2">Name Here</MudText>
                                        </div>
                                        <MudText Typo="Typo.body1">@comment.Comment</MudText>
                                        <div style="color: @Colors.BlueGrey.Lighten1">
                                            <MudText Typo="Typo.body2">@comment.DateCreated.Humanize()</MudText>
                                        </div>
                                    </div>
                                    <MudFab Color="Color.Success" StartIcon="@Icons.Material.Filled.CheckCircle" Size="Size.Large" OnClick="() => ApproveComment(comment)"/>
                                    <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Outlined.RemoveCircleOutline" Size="Size.Large" OnClick="() => Settings.FlaggedComments.Remove(comment)"/>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>

            </MudTabPanel>
        }

    </MudTabs>
    <MudItem xs="12" Class="d-flex justify-center">
        <MudButton Variant="Variant.Filled" OnClick="@(async () => await SubmitForm())" DisableElevation="true" Color="Color.Primary" Size="Size.Large" Class="mt-8">Save</MudButton>
    </MudItem>
</MudForm>

@code
{
    [Inject]
    private ISnackbar Snackbar { get; set; } = default!;

    [Inject]
    public IMediator Mediator { get; set; } = default!;

    private MudForm Form { get; set; } = default!;
    private string?[] Errors { get; set; } = Array.Empty<string>();
    private PostCommentSettings Settings { get; set; } = new();
    private List<PostComment> Comments { get; set; } = new();
    private CreateUpdatePluginCommand CreateUpdatePluginCommand { get; set; } = new();
    private readonly string _customCardStyle = $"cursor: pointer; border: 1px {Colors.BlueGrey.Lighten4} solid;";

    protected override async Task OnInitializedAsync()
    {
        var plugin = await Mediator.Send(new GetPluginByAliasCommand {Alias = PostCommentsConstants.PluginAlias}).ConfigureAwait(false);
        if (plugin != null)
        {
            CreateUpdatePluginCommand.IsUpdate = true;
            CreateUpdatePluginCommand.Plugin = plugin;

            var postCommentsGlobalSettings = plugin.PluginSettings?.ToType<PostCommentSettings>();
            if (postCommentsGlobalSettings != null)
            {
                Settings = postCommentsGlobalSettings;
            }
            var postCommentsData = plugin.PluginData?.ToType<List<PostComment>>();
            if (postCommentsData != null)
            {
                Comments = postCommentsData;
            }

            Settings.Enabled = CreateUpdatePluginCommand.Plugin.Enabled;
        }
        else
        {
            CreateUpdatePluginCommand.Plugin = new Plugin
            {
                PluginAlias = PostCommentsConstants.PluginAlias
            };
        }
    }

    private void ApproveComment(PostComment comment)
    {
        Settings.CommentsToApprove.Remove(comment);
        Settings.FlaggedComments.Remove(comment);
        Comments.Add(comment);
    }

    /// <summary>
    /// Submits the form and saves the settings
    /// </summary>
    private async Task SubmitForm()
    {
        await Form.Validate();
        if (Form.IsValid)
        {
            CreateUpdatePluginCommand = CreateUpdatePluginCommand.ReadyToSave(Settings, Comments);
            
            var result = await Mediator.Send(CreateUpdatePluginCommand).ConfigureAwait(false);

            Errors = CreateUpdatePluginCommand.ProcessResult(result, Snackbar);
        }
    }
}
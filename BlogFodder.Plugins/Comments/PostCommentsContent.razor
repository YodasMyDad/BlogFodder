@using BlogFodder.Core.Extensions
@using BlogFodder.Plugins.Comments.Models
@using System.Text.Json
@using Akismet
@using BlogFodder.Core.Plugins.Commands
@using BlogFodder.Core.Plugins.Models
@using Ganss.Xss
@using Humanizer
@using MediatR
@using Microsoft.Extensions.Configuration
@using Microsoft.Extensions.DependencyInjection
@using System.Security.Claims
@using BlogFodder.Core.Membership.Commands
@using BlogFodder.Core.Membership.Models
@implements BlogFodder.Core.Plugins.Interfaces.IPluginContentComponent

@if (PostId != null)
{
    <div class="container">
        <div class="row">
            <div class="col-md-8">
                <AuthorizeView>
                    <Authorized Context="authState">
                        <EditForm Model="@Comment" OnSubmit="@HandleSubmit">
                            <div class="mb-3">
                                <label for="Comment.Comment" class="form-label bf-label">Comment</label>
                                <InputTextArea @bind-Value="@Comment.Comment" id="Comment.Comment" class="form-control shadow-sm" rows="8"/>
                            </div>
                            <div class="col-12">
                                <button type="submit" class="btn btn-primary">Post Comment</button>
                            </div>
                        </EditForm>
                    </Authorized>
                    <NotAuthorized>
                        <p>You need to be logged in to comment</p>
                    </NotAuthorized>
                </AuthorizeView>
                
                <div class="pt-5">
                    @if (PostContentModel.PluginModel != null)
                    {
                        foreach (var comment in PostContentModel.PluginModel.Where(x => x.PostId == PostId))
                        {
                            <div class="card mb-2">
                                <div class="card-header">
                                    @if (CommentUsers.TryGetValue(comment.UserId, out var user))
                                    {
                                        @user.UserName
                                    }
                                    else
                                    {
                                        @("Unknown")
                                    }
                                </div>
                                <div class="card-body">
                                    @comment.Comment
                                </div>
                                <div class="card-footer text-muted">
                                    @comment.DateCreated.Humanize()
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {

    [Parameter]
    public string? Model { get; set; }

    [Parameter]
    public string? Settings { get; set; }

    [Parameter]
    public Guid? PostId { get; set; }

    [Inject]
    public IToastService ToastService { get; set; } = default!;

    [Inject]
    public IConfiguration Configuration { get; set; } = default!;

    [Inject]
    public IServiceProvider ServiceProvider { get; set; } = default!;

    [Inject]
    public AuthenticationStateProvider AuthenticationStateProvider { get; set; } = default!;

    private PostComment Comment { get; set; } = new() {DateCreated = DateTime.UtcNow};
    private PluginContentModel<List<PostComment>, PostCommentSettings> PostContentModel { get; set; } = new();
    private ClaimsPrincipal? User { get; set; }
    private Dictionary<Guid, User> CommentUsers { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        if (PostId != null)
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            User = authState.User;
            
            Comment.PostId = PostId.Value;
            PostContentModel = new PluginContentModel<List<PostComment>, PostCommentSettings>(Model, Settings);
            
            using var scope = ServiceProvider.CreateScope();
            var mediatr = scope.ServiceProvider.GetRequiredService<IMediator>();
            
            // Get the users on each comment
            var usersIds = PostContentModel.PluginModel?.Select(x => x.UserId);
            if (usersIds != null)
            {
                var users = await mediatr.Send(new GetUsersCommand {Ids = usersIds.ToList()});
                if (users.Any())
                {
                    CommentUsers = users.ToDictionary(x => x.Id, x => x);
                }
            }
        }
    }

    private async Task HandleSubmit()
    {
        using var scope = ServiceProvider.CreateScope();
        var mediatr = scope.ServiceProvider.GetRequiredService<IMediator>();

        var sanitizer = new HtmlSanitizer();
        if (Comment.Comment.IsNullOrWhiteSpace())
        {
            ToastService.ShowError("You need to enter a comment");
            return;
        }

        var canPostComment = true;
        
        Comment.UserId = User?.GetUserId() ?? Guid.Empty;
        Comment.Comment = sanitizer.Sanitize(Comment.Comment);

        if (PostContentModel.PluginSettings?.EnableAkismetSpamCheck == true)
        {
    // Has the user added Akismet API
            var akismetSpiKey = Configuration.GetSection("PostCommentsPlugin")["AkismetApiKey"];
            if (!akismetSpiKey.IsNullOrWhiteSpace())
            {
    // Get the akisment service
                var akismetService = scope.ServiceProvider.GetRequiredService<AkismetClient>();

                var comment = new AkismetComment
                {
                    Blog = Configuration.GetSection("PostCommentsPlugin")["Url"],
                    CommentAuthorEmail = User?.GetUserEmail(),
                    CommentContent = Comment.Comment
                };
                var result = await akismetService.CheckCommentAsync(comment);
                if (result.IsSpam)
                {
                    PostContentModel.PluginSettings.FlaggedComments.Add(Comment);
                    canPostComment = false;
                }
            }
        }

        if (canPostComment)
        {
            if (PostContentModel.PluginSettings?.ManuallyApproveComments == true)
            {
                PostContentModel.PluginSettings.CommentsToApprove.Add(Comment);
            }
            else
            {
                PostContentModel.PluginModel?.Add(Comment);
            }
        }

        var createUpdateCommand = new CreateUpdatePluginCommand();
        var plugin = await mediatr.Send(new GetPluginByAliasCommand {Alias = PostCommentsConstants.PluginAlias}).ConfigureAwait(false);
        if (plugin == null)
        {
    // This should not happen, but just in case
            plugin = new Plugin {PluginAlias = PostCommentsConstants.PluginAlias};
        }
        else
        {
            createUpdateCommand.IsUpdate = true;
        }
        plugin.PluginData = JsonSerializer.Serialize(PostContentModel.PluginModel);
        plugin.PluginSettings = JsonSerializer.Serialize(PostContentModel.PluginSettings);
        createUpdateCommand.Plugin = plugin;
        var saveResult = await mediatr.Send(createUpdateCommand).ConfigureAwait(false);
        if (saveResult.Success)
        {
            Comment = new PostComment {PostId = PostId!.Value, DateCreated = DateTime.UtcNow};
            ToastService.ShowSuccess("Comment added");
        }
        else
        {
            foreach (var message in saveResult.Messages)
            {
                if (message.Message != null) ToastService.ShowError(message.Message);
            }
        }
    }

}
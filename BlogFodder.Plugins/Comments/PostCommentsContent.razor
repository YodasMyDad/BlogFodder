@using BlogFodder.Core.Extensions
@using BlogFodder.Plugins.Comments.Models
@using System.Text.Json
@using Akismet
@using BlogFodder.Core.Plugins.Commands
@using BlogFodder.Core.Plugins.Models
@using Ganss.Xss
@using Humanizer
@using MediatR
@using Microsoft.Extensions.Configuration
@using Microsoft.Extensions.DependencyInjection
@implements BlogFodder.Core.Plugins.Interfaces.IPluginContentComponent

@if (PostId != null)
{
    <div class="container">
        <div class="row">
            <div class="col-md-8">
                <EditForm Model="@Comment" OnSubmit="@HandleSubmit">
                    <div class="mb-3">
                        <label for="Comment.Comment" class="form-label bf-label">Comment</label>
                        <InputTextArea @bind-Value="@Comment.Comment" id="Comment.Comment" class="form-control shadow-sm" rows="8"/>
                    </div>
                    <div class="col-12">
                        <button type="submit" class="btn btn-primary">Post Comment</button>
                    </div>
                </EditForm>
                <div class="pt-5">
                    @if (PostContentModel.PluginModel != null)
                    {
                        foreach (var comment in PostContentModel.PluginModel.Where(x => x.PostId == PostId))
                        {
                            <div class="card mb-2">
                                <div class="card-header">
                                    Name Here TODO
                                </div>
                                <div class="card-body">
                                    @comment.Comment
                                </div>
                                <div class="card-footer text-muted">
                                    @comment.DateCreated.Humanize()
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {

    [Parameter]
    public string? Model { get; set; }

    [Parameter]
    public string? Settings { get; set; }

    [Parameter]
    public Guid? PostId { get; set; }

    [Inject]
    public IToastService ToastService { get; set; } = default!;

    [Inject]
    public IConfiguration Configuration { get; set; } = default!;
    
    [Inject]
    public IMediator Mediator { get; set; } = default!;

    [Inject]
    public IServiceProvider ServiceProvider { get; set; } = default!;
    
    private PostComment Comment { get; set; } = new(){ DateCreated = DateTime.UtcNow};
    private PluginContentModel<List<PostComment>, PostCommentSettings> PostContentModel { get; set; } = new();

    protected override void OnInitialized()
    {
        if (PostId != null)
        {
            Comment.PostId = PostId.Value;
            PostContentModel = new PluginContentModel<List<PostComment>, PostCommentSettings>(Model, Settings);
        }
    }

    private async Task HandleSubmit()
    {
        var sanitizer = new HtmlSanitizer();
        if (Comment.Comment.IsNullOrWhiteSpace())
        {
            ToastService.ShowError("You need to enter a comment");
            return;
        }
        
        var canPostComment = true;
        
        // Sanitise comment
        Comment.Comment = sanitizer.Sanitize(Comment.Comment);

        if (PostContentModel.PluginSettings?.EnableAkismetSpamCheck == true)
        {
            // Has the user added Akismet API
            var akismetSpiKey = Configuration.GetSection("PostCommentsPlugin")["AkismetApiKey"];
            if (!akismetSpiKey.IsNullOrWhiteSpace())
            {
                // Get the akisment service
                var akismetService = ServiceProvider.GetService<AkismetClient>();
                if (akismetService != null)
                {
                    var comment = new AkismetComment
                    {
                        Blog = Configuration.GetSection("PostCommentsPlugin")["Url"],
                        CommentAuthorEmail = Comment.Name, // TODO - This needs to be the email!
                        CommentContent = Comment.Comment,
                    };
                    var result = await akismetService.CheckCommentAsync(comment);
                    if (result.IsSpam)
                    {
                        PostContentModel.PluginSettings.FlaggedComments.Add(Comment);
                        canPostComment = false;
                    }   
                }
            }
        }

        if (canPostComment)
        {
            if (PostContentModel.PluginSettings?.ManuallyApproveComments == true)
            {
                PostContentModel.PluginSettings.CommentsToApprove.Add(Comment);
            }
            else
            {
                PostContentModel.PluginModel?.Add(Comment);
            }
        }

        var createUpdateCommand = new CreateUpdatePluginCommand();
        var plugin = await Mediator.Send(new GetPluginByAliasCommand {Alias = PostCommentsConstants.PluginAlias}).ConfigureAwait(false);
        if (plugin == null)
        {
            // This should not happen, but just in case
            plugin = new Plugin { PluginAlias = PostCommentsConstants.PluginAlias};
        }
        else
        {
            createUpdateCommand.IsUpdate = true;
        }
        plugin.PluginData = JsonSerializer.Serialize(PostContentModel.PluginModel);
        plugin.PluginSettings = JsonSerializer.Serialize(PostContentModel.PluginSettings);
        createUpdateCommand.Plugin = plugin;
        var saveResult = await Mediator.Send(createUpdateCommand).ConfigureAwait(false);
        if (saveResult.Success)
        {
            Comment = new PostComment { PostId = PostId!.Value, DateCreated = DateTime.UtcNow};
            ToastService.ShowSuccess("Comment added");
        }
        else
        {
            foreach (var message in saveResult.Messages)
            {
                if (message.Message != null) ToastService.ShowError(message.Message);
            }
        }
    }

}
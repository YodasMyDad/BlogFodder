@using System.Text.Json
@using BlogFodder.Core.Extensions
@implements BlogFodder.Core.Plugins.Interfaces.IEditorPluginContentComponent
<div id="@CarouselId" class="carousel slide" data-bs-ride="carousel">
    <div class="carousel-indicators">
        <button type="button" data-bs-target="#@CarouselId" data-bs-slide-to="0" class="active" aria-current="true" aria-label="Slide 1"></button>
        <button type="button" data-bs-target="#@CarouselId" data-bs-slide-to="1" aria-label="Slide 2"></button>
        <button type="button" data-bs-target="#@CarouselId" data-bs-slide-to="2" aria-label="Slide 3"></button>
    </div>
    <div class="carousel-inner">
        @for (var i = 0; i < CarouselItems.Count; i++)
        {
            var ci = CarouselItems[i];
            <div class="carousel-item @(i == 0 ? "active" : "")">
                <img src="@(ci.ImageUrl)?width=@(EditorSettings.ImageWidth)&height=@(EditorSettings.ImageHeight)&mode=crop" class="d-block w-100" alt="@ci.Heading">
                @if (!ci.Heading.IsNullOrWhiteSpace() || !ci.Description.IsNullOrWhiteSpace())
                {
                    <div class="carousel-caption d-none d-md-block">
                        @if (ci.Heading.IsNullOrWhiteSpace())
                        {
                            <h5>@ci.Heading</h5>
                        }
                        @if (ci.Description.IsNullOrWhiteSpace())
                        {
                            <p>@ci.Description</p>
                        }
                    </div>
                }
            </div>
        }

    </div>
    <button class="carousel-control-prev" type="button" data-bs-target="#@CarouselId" data-bs-slide="prev">
        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
        <span class="visually-hidden">Previous</span>
    </button>
    <button class="carousel-control-next" type="button" data-bs-target="#@CarouselId" data-bs-slide="next">
        <span class="carousel-control-next-icon" aria-hidden="true"></span>
        <span class="visually-hidden">Next</span>
    </button>
</div>


@code {

    [Parameter]
    public string? Model { get; set; }

    [Parameter]
    public string? Settings { get; set; }


    private CarouselEditorSettings EditorSettings { get; set; } = new();
    private List<CarouselItem> CarouselItems { get; set; } = new();
    private string CarouselId { get; set; }

    protected override void OnInitialized()
    {
        CarouselId = $"carousel-{Guid.NewGuid().NewSequentialGuid()}";
        if (!Model.IsNullOrWhiteSpace())
        {
            CarouselItems = JsonSerializer.Deserialize<List<CarouselItem>>(Model) ?? new List<CarouselItem>();
        }

        if (!Settings.IsNullOrWhiteSpace())
        {
            EditorSettings = JsonSerializer.Deserialize<CarouselEditorSettings>(Settings) ?? new CarouselEditorSettings();
        }
    }

}
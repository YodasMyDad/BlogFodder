@using System.Text.Json
@using BlogFodder.Core.Extensions
@implements BlogFodder.Core.Plugins.Interfaces.IEditorPluginContentComponent

@if (Model != null)
{
    <div class="@((MarkupString) EditorSettings.PaddingMargin())">
        <div id="@CarouselId" class="carousel slide" data-bs-ride="carousel">
            <div class="carousel-indicators">
                @for (var index = 0; index < CarouselItems.Count; index++)
                {
                    if (index == 0)
                    {
                        <button type="button" data-bs-target="#@CarouselId" data-bs-slide-to="@index" class="active" aria-current="true" aria-label="Slide @(index+1)"></button>       
                    }
                    else
                    {
                        <button type="button" data-bs-target="#@CarouselId" data-bs-slide-to="@index" aria-label="Slide @(index+1)"></button>        
                    }
                }
            </div>
            <div class="carousel-inner">
                @for (var i = 0; i < CarouselItems.Count; i++)
                {
                    var ci = CarouselItems[i];
                    <a href="@ci.Url" class="carousel-item @(i == 0 ? "active" : "")">
                        <img src="@(ci.ImageUrl)?width=@(EditorSettings.ImageWidth)&height=@(EditorSettings.ImageHeight)&mode=crop" class="d-block w-100" alt="@ci.Heading">
                        @if (!ci.Heading.IsNullOrWhiteSpace() || !ci.Description.IsNullOrWhiteSpace())
                        {
                            <div class="carousel-caption d-none d-md-block">
                                @if (!ci.Heading.IsNullOrWhiteSpace())
                                {
                                    <h5>@ci.Heading</h5>
                                }
                                @if (!ci.Description.IsNullOrWhiteSpace())
                                {
                                    <p>@ci.Description</p>
                                }
                            </div>
                        }
                    </a>
                }

            </div>
            <button class="carousel-control-prev" type="button" data-bs-target="#@CarouselId" data-bs-slide="prev">
                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                <span class="visually-hidden">Previous</span>
            </button>
            <button class="carousel-control-next" type="button" data-bs-target="#@CarouselId" data-bs-slide="next">
                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                <span class="visually-hidden">Next</span>
            </button>
        </div>
    </div>
}

@code {

    [Parameter]
    public string? Model { get; set; }

    [Parameter]
    public string? Settings { get; set; }


    private CarouselEditorSettings EditorSettings { get; set; } = new();
    private List<CarouselItem> CarouselItems { get; set; } = new();
    private string CarouselId { get; set; }

    protected override void OnParametersSet()
    {
        CarouselId = $"carousel-{Guid.NewGuid().NewSequentialGuid()}";
        if (!Model.IsNullOrWhiteSpace())
        {
            CarouselItems = JsonSerializer.Deserialize<List<CarouselItem>>(Model) ?? new List<CarouselItem>();
        }

        if (!Settings.IsNullOrWhiteSpace())
        {
            EditorSettings = JsonSerializer.Deserialize<CarouselEditorSettings>(Settings) ?? new CarouselEditorSettings();
        }
    }

}
@page "/admin/richtexteditorsettings"
@using MediatR
@using BlogFodder.Core.Plugins.Commands
@using BlogFodder.Core.Extensions
@using System.Text.Json
@using BlogFodder.Core.Plugins.Models
@layout AdminLayout
<PageTitle>RTE Editor Settings</PageTitle>
@if (Errors.Length > 0)
{
    <MudAlert Severity="Severity.Error" Class="my-2">
        @foreach (var error in Errors)
        {
            <MudText>@error</MudText>
        }
    </MudAlert>
}
<MudForm Model="@RichTextGlobalSettings" @ref="@Form" @bind-Errors="@Errors" ValidationDelay="0">
    <MudTabs Outlined="true" Position="Position.Top" Rounded="true" Border="true" KeepPanelsAlive="true" ApplyEffectsToContainer="true" PanelClass="pa-6">

        <MudTabPanel Text="Settings">
            <MudGrid>
                <MudItem xs="12">
                    <MudTextField Label="API Key" Variant="Variant.Outlined" Margin="Margin.Dense"
                                  HelperText="Get the API key from TinyMCE website" @bind-Value="RichTextGlobalSettings.ApiKey" For="@(() => RichTextGlobalSettings.ApiKey)"/>
                </MudItem>

                <MudItem xs="12">
                    <MudNumericField @bind-Value="RichTextGlobalSettings.Height" Label="Height" Variant="Variant.Outlined" Margin="Margin.Dense" Min="100" For="@(() => RichTextGlobalSettings.Height)" />
                </MudItem>
                
                <MudItem xs="12">
                    <MudTextField Lines="3" Label="Toolbar" Variant="Variant.Outlined" Margin="Margin.Dense"
                                  HelperText="Check the TinyMCE website for more info" @bind-Value="RichTextGlobalSettings.ToolBar" For="@(() => RichTextGlobalSettings.ToolBar)"/>
                </MudItem>
                
                <MudItem xs="12">
                    <MudTextField Lines="3" Label="Plugins" Variant="Variant.Outlined" Margin="Margin.Dense"
                                  HelperText="Check the TinyMCE website for more info" @bind-Value="RichTextGlobalSettings.Plugins" For="@(() => RichTextGlobalSettings.Plugins)"/>
                </MudItem>
            </MudGrid>

        </MudTabPanel>
    </MudTabs>
    <MudItem xs="12" Class="d-flex justify-center">
        <MudButton Variant="Variant.Filled" OnClick="@(async () => await SubmitForm())" DisableElevation="true" Color="Color.Primary" Size="Size.Large" Class="mt-8">Save</MudButton>
    </MudItem>
</MudForm>

@code
{
    [Inject]
    private ISnackbar Snackbar { get; set; } = default!;

    [Inject]
    public IMediator Mediator { get; set; } = default!;

    private MudForm Form { get; set; } = default!;
    private string?[] Errors { get; set; } = Array.Empty<string>();
    private RichTextGlobalSettings RichTextGlobalSettings { get; set; } = new();
    private SavePluginSettingsCommand SavePluginSettingsCommand { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var globalSettingsCommand = new GetPluginSettingsCommand
        {
            Alias = RichTextEditorConstants.PluginAlias
        };

        var globalSettings = await Mediator.Send(globalSettingsCommand).ConfigureAwait(false);
        if (globalSettings != null)
        {
            SavePluginSettingsCommand.IsUpdate = true;
            SavePluginSettingsCommand.Settings = globalSettings;

            if (!globalSettings.Data.IsNullOrWhiteSpace())
            {
                RichTextGlobalSettings = JsonSerializer.Deserialize<RichTextGlobalSettings>(globalSettings.Data)!;
            }
        }
        else
        {
            SavePluginSettingsCommand.Settings = new GlobalSettings
            {
                Alias = RichTextEditorConstants.PluginAlias
            };
        }
    }

    /// <summary>
    /// Submits the form and saves the settings
    /// </summary>
    private async Task SubmitForm()
    {
        await Form.Validate();
        if (Form.IsValid)
        {
            SavePluginSettingsCommand.Settings!.Data = JsonSerializer.Serialize(RichTextGlobalSettings, new JsonSerializerOptions {WriteIndented = false}); // Is this compact JSON?
            var result = await Mediator.Send(SavePluginSettingsCommand).ConfigureAwait(false);
            if (result.Success)
            {
                var correctText = SavePluginSettingsCommand.IsUpdate ? "Updated" : "Created";
                Snackbar.Add("Settings " + correctText, Severity.Success);

                if (!SavePluginSettingsCommand.IsUpdate)
                {
                    SavePluginSettingsCommand.IsUpdate = true;
                }
            }
            else
            {
                Errors = result.Messages.ErrorMessagesToList().ToArray();
            }
        }
    }
}
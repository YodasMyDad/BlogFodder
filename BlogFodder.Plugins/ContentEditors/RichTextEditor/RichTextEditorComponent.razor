@using System.Text.Json
@using BlogFodder.Core.Extensions
@using BlogFodder.Core.Posts.Models
@using JsonSerializer = System.Text.Json.JsonSerializer
@implements BlogFodder.Core.Plugins.Interfaces.IEditorPluginComponent

<MudDialog>
    <DialogContent>
        <MudTabs Rounded="true" ApplyEffectsToContainer="true" PanelClass="py-6" KeepPanelsAlive="true">

            <MudTabPanel Text="Editor">
                <TinyMCE.Blazor.Editor Conf="@DefaultEditorSettings" @bind-Value="@EditorData"/>
            </MudTabPanel>

            <MudTabPanel Text="Settings">
                <MudText>TODO</MudText>
                @*<MudTextField @bind-Value="Post.Url" Label="Url" Variant="Variant.Text"></MudTextField>
                    <MudDatePicker Label="Date Created" PickerVariant="PickerVariant.Dialog" DisableToolbar="true" @bind-Date="DateCreated"/>
                    <MudDatePicker Label="Date Updated" PickerVariant="PickerVariant.Dialog" DisableToolbar="true" @bind-Date="DateUpdated"/>*@
            </MudTabPanel>
            
        </MudTabs>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>


@code {

    // Model that is passed in from the database
    [Parameter]
    public PostContentItem PostContentItem { get; set; } = new();

    // The callback to send the data back to the post page
    [Parameter]
    public EventCallback<PostContentItem> SaveAndClose { get; set; }
    
    // The deserialised data from the db
    private RichTextEditorSettings EditorSettings { get; set; } = new();
    private RichTextGlobalSettings GlobalSettings { get; set; } = new();
    private string EditorData { get; set; } = string.Empty;

    public Dictionary<string, object> DefaultEditorSettings { get; set; } = new();

    // Submits the data and closes the dialog
    public Task Submit()
    {
        PostContentItem.PluginData = EditorData;
        PostContentItem.PluginSettings = JsonSerializer.Serialize(EditorSettings, new JsonSerializerOptions{ WriteIndented = false}); // Is this compact JSON?
        return SaveAndClose.InvokeAsync(PostContentItem);
    }

    // Onload, get the serialised data from the db and deserialise into the correct properties
    protected override void OnInitialized()
    {
        if (!PostContentItem.PluginData.IsNullOrWhiteSpace())
        {
            EditorData = PostContentItem.PluginData;
        }
        
        if (!PostContentItem.PluginSettings.IsNullOrWhiteSpace())
        {
            EditorSettings = JsonSerializer.Deserialize<RichTextEditorSettings>(PostContentItem.PluginSettings) ?? new RichTextEditorSettings();
        }
        
        if (!PostContentItem.GlobalSettings.IsNullOrWhiteSpace())
        {
            // Weird but here. The JSON string is escaped, so we need to unescape it before we try and deserialize into the object
            var firstDeserialize = JsonSerializer.Deserialize<string>(PostContentItem.GlobalSettings) ?? "";
            GlobalSettings = JsonSerializer.Deserialize<RichTextGlobalSettings>(firstDeserialize) ?? new RichTextGlobalSettings();
        }
        
        DefaultEditorSettings = new Dictionary<string, object>
        {
            {"height", GlobalSettings.Height},
            {"toolbar", GlobalSettings.ToolBar ?? ""},
            {"plugins", GlobalSettings.Plugins ?? ""}
        };
    }
}
@using System.Text.Json
@using BlogFodder.Core.Extensions
@using BlogFodder.Core.Posts.Models
@implements BlogFodder.Core.Plugins.Interfaces.IEditorPluginComponent
@inject IJSRuntime JsRuntime

<MudDialog>
    <DialogContent>
        <MudTabs Rounded="true" ApplyEffectsToContainer="true" PanelClass="py-6 ">

            <MudTabPanel Text="Editor">
                <textarea id="simplemde"></textarea>
            </MudTabPanel>

            <MudTabPanel Text="Settings">
                <MudText>TODO</MudText>
                @*<MudTextField @bind-Value="Post.Url" Label="Url" Variant="Variant.Text"></MudTextField>
                    <MudDatePicker Label="Date Created" PickerVariant="PickerVariant.Dialog" DisableToolbar="true" @bind-Date="DateCreated"/>
                    <MudDatePicker Label="Date Updated" PickerVariant="PickerVariant.Dialog" DisableToolbar="true" @bind-Date="DateUpdated"/>*@
            </MudTabPanel>
            
        </MudTabs>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {

    //https://www.puresourcecode.com/dotnet/blazor/markdown-editor-component-for-blazor/
    
    [Parameter]
    public PostContentItem PostContentItem { get; set; } = new();
    
    [Parameter]
    public EventCallback<PostContentItem> SaveAndClose { get; set; }

    private string EditorData { get; set; } = string.Empty;
    
    public Task Submit()
    {
        /*PostContentItem.PluginData = EditorData;
        PostContentItem.PluginSettings = JsonSerializer.Serialize(EditorSettings, new JsonSerializerOptions{ WriteIndented = false});*/
        return SaveAndClose.InvokeAsync(PostContentItem);
    }
    
    protected override void OnInitialized()
    {
        if (!PostContentItem.PluginData.IsNullOrWhiteSpace())
        {
            EditorData = PostContentItem.PluginData;
        }
        MakeEditor();
    /*if (!PostContentItem.PluginSettings.IsNullOrWhiteSpace())
        {
            EditorSettings = JsonSerializer.Deserialize<RichTextEditorSettings>(PostContentItem.PluginSettings) ?? new RichTextEditorSettings();
        }
        
        if (!PostContentItem.GlobalSettings.IsNullOrWhiteSpace())
        {
            GlobalSettings = JsonSerializer.Deserialize<RichTextGlobalSettings>(PostContentItem.GlobalSettings) ?? new RichTextGlobalSettings();
        }*/
    }

    private IJSObjectReference MyJsModule { get; set; }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Load the JS Helpers Module
                MyJsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/BlogFodder.Plugins/js/markdowneditor.js");
            }
            catch (Exception ex)
            {
                //Logger.LogError($"Failed to load JS module. Error: {ex}");
            }
        }
    }

    private async void MakeEditor()
    {
        try
        {
            //await MyJsModule.InvokeVoidAsync("MakeEditor", "foo");
            await MyJsModule.InvokeVoidAsync("makeEditor");
        }
        catch (Exception ex)
        {
            //Logger.LogError($"Failed to execute JS function. Error: {ex}");
        }
    }
    
}

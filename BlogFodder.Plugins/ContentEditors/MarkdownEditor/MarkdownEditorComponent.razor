@using BlogFodder.Core.Posts.Models
@using System.Text.Json
@using BlogFodder.Core.Extensions
@implements BlogFodder.Core.Plugins.Interfaces.IEditorPluginComponent
@inject IJSRuntime JsRuntime

<MudDialog>
    <DialogContent>
        <MudTabs Rounded="true" ApplyEffectsToContainer="true" PanelClass="py-6" KeepPanelsAlive="true">

            <MudTabPanel Text="Editor">
                <MudCard>
                    <textarea id="@EditorId">@PostContentItem.PluginData</textarea>
                </MudCard>
            </MudTabPanel>
            
            <MudTabPanel Text="Settings">
                <EditorSettingsDefault EditorSettings="@EditorSettings" />
            </MudTabPanel>

        </MudTabs>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" Size="Size.Large" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {

    //https://www.puresourcecode.com/dotnet/blazor/markdown-editor-component-for-blazor/

    [Parameter]
    public PostContentItem PostContentItem { get; set; } = new();

    [Parameter]
    public EventCallback<PostContentItem> SaveAndClose { get; set; }
    
    private string EditorId { get; set; } = string.Empty;
    private MarkdownEditorSettings EditorSettings { get; set; } = new();

    public async Task<Task> Submit()
    {
        PostContentItem.PluginData = await GetEditorValue();
        PostContentItem.PluginSettings = JsonSerializer.Serialize(EditorSettings, new JsonSerializerOptions{ WriteIndented = false}); // Is this compact JSON?
        return SaveAndClose.InvokeAsync(PostContentItem);
    }
    
    protected override void OnInitialized()
    {
        EditorId = $"easymde-{PostContentItem.Id}";
        
        if (!PostContentItem.PluginSettings.IsNullOrWhiteSpace())
        {
            EditorSettings = JsonSerializer.Deserialize<MarkdownEditorSettings>(PostContentItem.PluginSettings) ?? new MarkdownEditorSettings();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeVoidAsync("initializeEasyMDE", EditorId);
        }
    }
    
    private async Task<string> GetEditorValue()
    {
        return await JsRuntime.InvokeAsync<string>("getEasyMDEValue", EditorId);
    }

    /*private async Task SetEditorValue(string data)
    {
        await JsRuntime.InvokeVoidAsync("setEasyMDEValue", EditorId, data);
    }*/

}
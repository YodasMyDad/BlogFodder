@using BlogFodder.Core.Settings
@using Microsoft.Extensions.Options
@using BlogFodder.Core.Extensions
@using BlogFodder.Core.Categories.Models
@using BlogFodder.Core.Data
@using BlogFodder.Core.Settings.Commands
@using BlogFodder.Core.Settings.Models
@using MediatR
@using Microsoft.EntityFrameworkCore
@using BlogFodder.Core
@using MailKit.Search
@using Microsoft.Extensions.DependencyInjection
<nav class="navbar navbar-expand-lg bg-secondary-subtle">
    <div class="container">
        <a class="navbar-brand" href="/">
            @if (Settings.LogoId == null)
            {
                <img src="@Constants.DefaultLogo" class="text-primary" alt="@Settings.SiteName Logo" width="24" height="24">
            }
            else
            {
                <img src="@Settings.Logo!.Url?width=24" alt="@Settings.SiteName Logo" width="24" height="24">
            }
        </a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#mainnavigation" aria-controls="mainnavigation" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="mainnavigation">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                @foreach (var topnav in BlogFodderSettings.Value.FrontEnd.SiteNavigation.TopNav)
                {
                    @*<a class="nav-link active" aria-current="page" href="#">Home</a>*@
                    @if (topnav.Link?.Equals("#catlist#", StringComparison.OrdinalIgnoreCase) == true)
                    {
                        if (Categories.Any())
                        {
                            <li class="nav-item dropdown">
                                <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                    Categories
                                </a>
                                <ul class="dropdown-menu">
                                    @foreach (var category in Categories)
                                    {
                                        <li>
                                            <a class="dropdown-item" href="@Urls.Create(category.Url, typeof(Category))">@category.Name</a>
                                        </li>
                                    }
                                </ul>
                            </li>
                        }
                    }
                    else
                    {
                        <li class="nav-item">
                            <NavLink class="nav-link" href="@topnav.Link">@topnav.Name</NavLink>
                        </li>
                    }
                }
            </ul>
            <form @onsubmit="@(Search)" class="d-flex" role="search">
                <InputText @bind-Value="SearchTerm" class="form-control me-2" type="search" placeholder="Search" aria-label="Search" />
                <button class="btn btn-primary" type="submit">Search</button>
            </form>
            <AuthorizeView>
                <Authorized Context="authState">
                    <ul class="navbar-nav my-3 my-lg-0">
                        <li class="nav-item dropdown">
                            <a href="#" class="mt-1 ms-lg-4 text-decoration-none" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                @if (authState.User.HasProfileImage())
                                {
                                    <img src="/@authState.User.GetProfileImage()?width=32&height=32" alt="@authState.User.GetUserName() Avatar" width="32" height="32" class="rounded-circle">
                                }
                                else
                                {
                                    <img src="@($"https://www.gravatar.com/avatar/{authState.User.GetMd5()}?d=robohash")" alt="@authState.User.GetUserName() Avatar" width="32" height="32" class="rounded-circle">   
                                }
                                <span class="d-lg-none">Username</span>
                            </a>
                            <ul class="dropdown-menu dropdown-menu-end">
                                @if (authState.User.IsInRole(Constants.Roles.AdminRoleName))
                                {
                                    <li>
                                        <a class="dropdown-item" @onclick="@(() => NavigationManager.NavigateTo("/admin", forceLoad: true))">Admin</a>
                                    </li>
                                }
                                <li>
                                    <a class="dropdown-item" @onclick="@(() => NavigationManager.NavigateTo(@Constants.Urls.Account.UserProfile, forceLoad: true))">Profile</a>
                                </li>
                                <li>
                                    <hr class="dropdown-divider">
                                </li>
                                <li>
                                    <a class="dropdown-item" href="@Constants.Urls.Account.Logout">Sign out</a>
                                </li>
                            </ul>
                        </li>
                    </ul>
                </Authorized>
                <NotAuthorized>
                    <a href="@Constants.Urls.Account.Login" class="ms-2 btn btn-primary">Login</a>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </div>
</nav>

@code {
    [Inject] public IOptions<BlogFodderSettings> BlogFodderSettings { get; set; } = default!;
    [Inject] public NavigationManager NavigationManager { get; set; } = default!;
    [Inject] public IServiceProvider ServiceProvider { get; set; } = default!;

    private SiteSettings Settings { get; set; } = default!;
    private List<Category> Categories { get; set; } = new();
    private string? SearchTerm { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var scope = ServiceProvider.CreateScope();
        var mediatr = scope.ServiceProvider.GetRequiredService<IMediator>();
        var dbContext = scope.ServiceProvider.GetRequiredService<BlogFodderDbContext>();
        Categories = await dbContext.Categories.AsNoTracking().ToListAsync();
        Settings = await mediatr.Send(new GetSiteSettingsCommand()).ConfigureAwait(false);
    }

    private void Search()
    {
        if (!SearchTerm.IsNullOrWhiteSpace())
        {
            NavigationManager.NavigateTo(Urls.Create(SearchTerm, typeof(SearchResults))!);
        }
    }
}
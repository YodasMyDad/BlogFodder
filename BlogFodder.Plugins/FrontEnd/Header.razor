@using BlogFodder.Core.Settings
@using Microsoft.Extensions.Options
@using BlogFodder.Core.Extensions
@using BlogFodder.Core.Categories.Models
@using BlogFodder.Core.Data
@using BlogFodder.Core.Plugins.Models
@using BlogFodder.Core.Settings.Commands
@using BlogFodder.Core.Settings.Models
@using MediatR
@using Microsoft.EntityFrameworkCore
@implements IDisposable
<nav class="navbar navbar-expand-lg bg-secondary-subtle">
    <div class="container">
        <a class="navbar-brand" href="/">
            @if (Settings.LogoId == null)
            {
                <img src="/img/b-logo.png?width=24" alt="@Settings.SiteName Logo" width="24" height="24">
            }
            else
            {
                <img src="@Settings.Logo!.Url?width=24" alt="@Settings.SiteName Logo" width="24" height="24">   
            }
        </a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#mainnavigation" aria-controls="mainnavigation" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="mainnavigation">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                @foreach (var topnav in BlogFodderSettings.Value.FrontEnd.SiteNavigation.TopNav)
                {
                    @*<a class="nav-link active" aria-current="page" href="#">Home</a>*@
                    @if (topnav.Link?.Equals("#catlist#", StringComparison.OrdinalIgnoreCase) == true)
                    {
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                Categories
                            </a>
                            <ul class="dropdown-menu">
                                @foreach (var category in Categories)
                                {
                                    <li><a class="dropdown-item" href="/c/@category.Url">@category.Name</a></li>   
                                }
                            </ul>
                        </li>                        
                    }
                    else
                    {
                        <li class="nav-item">
                            <NavLink class="nav-link" href="@topnav.Link" @onclick="@(() => GoTo(topnav))">@topnav.Name</NavLink>   
                        </li>
                    }
                }
            </ul>
            <form class="d-flex" role="search">
                <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search">
                <button class="btn btn-primary" type="submit">Search</button>
            </form>
            @*<ul class="navbar-nav my-3 my-lg-0">
                <li class="nav-item dropdown">
                    <a href="#" class="mt-1 ms-lg-4 text-decoration-none" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                        <img src="https://github.com/mdo.png" alt="mdo" width="32" height="32" class="rounded-circle">
                        <span class="d-lg-none">Username</span> 
                    </a>
                    <ul class="dropdown-menu dropdown-menu-end">
                        <li><a class="dropdown-item" href="#">New project...</a></li>
                        <li><a class="dropdown-item" href="#">Settings</a></li>
                        <li><a class="dropdown-item" href="#">Profile</a></li>
                        <li><hr class="dropdown-divider"></li>
                        <li><a class="dropdown-item" href="#">Sign out</a></li>
                    </ul>
                </li>
            </ul>*@
        </div>
    </div>
</nav>

@code {
    [Inject] 
    public IDbContextFactory<BlogFodderDbContext> DbContextFactory { get; set; } = default!;
    
    [Inject]
    public IOptionsSnapshot<BlogFodderSettings> BlogFodderSettings { get; set; } = default!;

    [Inject]
    public NavigationManager NavigationManager { get; set; } = default!;
    
    [Inject]
    public IMediator Mediator { get; set; } = default!;
    
    private SiteSettings Settings { get; set; } = default!;
    private List<Category> Categories { get; set; } = new();
    private BlogFodderDbContext DbContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        DbContext = await DbContextFactory.CreateDbContextAsync();
        Categories = await DbContext.Categories.AsNoTracking().ToListAsync();
        
        Settings = await Mediator.Send(new GetSiteSettingsCommand()).ConfigureAwait(false);
        
    }

    private void GoTo(SiteNavigationItem item)
    {
        if (!item.Link.IsNullOrWhiteSpace())
        {
            NavigationManager.NavigateTo(item.Link, item.ForceReload);
        }
    }

    public void Dispose()
    {
        DbContext.Dispose();
    }

}
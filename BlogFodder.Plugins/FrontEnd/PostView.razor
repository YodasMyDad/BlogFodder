@using BlogFodder.Core.Posts.Models
@using Humanizer
@using BlogFodder.Core.Plugins.Interfaces
@using BlogFodder.Core.Plugins
@using BlogFodder.Core.Plugins.Models

<main class="container">

    <div class="row my-4 g-5">
        <div class="@PostWidth">

            <article class="blog-post">
                @if (Post.ShowFeaturedImageOnPost)
                {
                    <img class="img-fluid mx-auto" src="@Post.FeaturedImage?.Url?width=900&height=300&mode=crop" alt="@Post.Name - Image">   
                }
                @if (Post.ShowDefaultHeading)
                {
                    <h1>@Post.Name</h1>   
                }
                @if (Post.ShowAuthorName)
                {
                    <p class="fw-light">By: @Post.User?.UserName</p>   
                }
                @if (Post.ShowLastUpdated)
                {
                    <p class="text-muted">
                        <small>Last Updated: @Post.DateUpdated.Humanize()</small>
                    </p>   
                }
                @foreach (var postContentItem in Post.ContentItems)
                {
                    <div class="postContentItem">
                        <DynamicComponent Type="@AvailableEditorPlugins[postContentItem.PluginAlias!].Content.Component"
                                          Parameters="@(new Dictionary<string, object> { {"Model", postContentItem.PluginData ?? ""}, {"Settings", postContentItem.PluginSettings ?? ""} })"/>
                    </div>
                }
            </article>

        </div>
        @if (!Post.RemoveSideColumn)
        {
            <div class="col-md-4">
                <div class="position-sticky" style="top: 2rem;">
                    <RenderPlugins PluginDisplayArea="PluginDisplayArea.PostSideBarTop"/>
                    <RenderPlugins PluginDisplayArea="PluginDisplayArea.PostSideBarBottom"/>
                </div>
            </div>   
        }
    </div>

</main>

@code {

    [Inject]
    public ExtensionManager ExtensionManager { get; set; } = default!;

    private Dictionary<string, IEditorPlugin> AvailableEditorPlugins { get; set; } = new();

    [Parameter]
    public Post Post { get; set; } = default!;

    private string PostWidth { get; set; } = "col-md-8";

    protected override void OnParametersSet()
    {
        if (Post.RemoveSideColumn)
        {
            PostWidth = "col-md-10 offset-md-1";
        }
        var editorPlugins = ExtensionManager.GetInstances<IEditorPlugin>(true);
        foreach (var plugin in editorPlugins)
        {
            AvailableEditorPlugins.TryAdd(plugin.Value.Alias, plugin.Value);
        }
    }
}
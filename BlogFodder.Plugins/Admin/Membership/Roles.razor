@page "/admin/membership/roles"
@layout AdminLayout
@using BlogFodder.Core.Data
@using Humanizer
@using MediatR
@using Microsoft.EntityFrameworkCore
@using BlogFodder.Core.Membership.Models
@implements IDisposable
<PageTitle>Manage Roles</PageTitle>

<MudTable Items="@AllRoles" Hover="true" OnRowClick="RowClickEvent" T="Role">
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Date Created</MudTh>
        <MudTh>Delete</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Date Created">@context.CreateDate.Humanize()</MudTd>
        <MudTd DataLabel="Delete">
            <MudButton Color="Color.Primary" OnClick="@(() => DeleteRole(context))">Delete</MudButton>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    
    [Inject] public IDbContextFactory<BlogFodderDbContext> DbContextFactory { get; set; } = default!;
    [Inject] public NavigationManager NavigationManager { get; set; } = default!;
    [Inject] public IMediator Mediator { get; set; } = default!;
    [Inject] private ISnackbar Snackbar { get; set; } = default!;
    [Inject] private IDialogService DialogService { get; set; } = default!;
    
    private BlogFodderDbContext DbContext { get; set; } = default!;
    private List<Role> AllRoles { get; set; } = new();

    protected override void OnInitialized()
    {
        DbContext = DbContextFactory.CreateDbContext();
        SetRoles();
    }

    private async Task DeleteRole(Role role)
    {
        var dialogResult = await DialogService.ShowMessageBox(
            "Warning", 
            "Once you click delete the role is gone", 
            yesText:"Delete", cancelText:"Cancel");
        /*if (dialogResult == true)
        {
            var result = await Mediator.Send(new DeleteCategoryCommand{CategoryId = category.Id}).ConfigureAwait(false);
            if (result is {Success: false})
            {
                foreach (var errorMessage in result.Messages.ErrorMessagesToList())
                {
                    Snackbar.Add(errorMessage, Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("User Deleted", Severity.Success);
                SetUsers();
                StateHasChanged();
            }   
        }*/
    }

    private void SetRoles()
    {
        AllRoles = DbContext.Roles.AsNoTracking().OrderByDescending(x => x.CreateDate).ToList();
    }
    
    private void RowClickEvent(TableRowClickEventArgs<Role> tableRowClickEventArgs)
    {
        //NavigationManager.NavigateTo($"/admin/createcategory/{tableRowClickEventArgs.Item.Id}");
    }

    public void Dispose()
    {
        DbContext.Dispose();
    }
}
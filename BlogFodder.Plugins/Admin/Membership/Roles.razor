@page "/admin/membership/roles"
@layout AdminLayout
@using BlogFodder.Core.Data
@using MediatR
@using Microsoft.EntityFrameworkCore
@using BlogFodder.Core.Membership.Models
@using BlogFodder.Plugins.Admin.Membership.Dialogs
@implements IDisposable
<PageTitle>Manage Roles</PageTitle>

<div class="d-flex justify-end mb-3">
    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@(() => OpenEditRoleDialog(null))">Create Role</MudButton>
</div>

<MudTable Items="@AllRoles" Hover="true" OnRowClick="RowClickEvent" T="Role" RowClass="rowpointer">
    <HeaderContent>
        <MudTh>Role Name</MudTh>
        <MudTh>Delete</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Role Name">@context.Name</MudTd>
        <MudTd DataLabel="Delete">
            <MudButton Color="Color.Primary" OnClick="@(() => DeleteRole(context))">Delete</MudButton>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    
    [Inject] public IDbContextFactory<BlogFodderDbContext> DbContextFactory { get; set; } = default!;
    [Inject] public NavigationManager NavigationManager { get; set; } = default!;
    [Inject] public IMediator Mediator { get; set; } = default!;
    [Inject] private ISnackbar Snackbar { get; set; } = default!;
    [Inject] private IDialogService DialogService { get; set; } = default!;
    
    private BlogFodderDbContext DbContext { get; set; } = default!;
    private List<Role> AllRoles { get; set; } = new();
    private readonly DialogOptions _defaultDialogOptions = new() {MaxWidth = MaxWidth.Large, FullWidth = true};

    protected override void OnInitialized()
    {
        DbContext = DbContextFactory.CreateDbContext();
        SetRoles();
    }

    private async Task DeleteRole(Role role)
    {
        var dialogResult = await DialogService.ShowMessageBox(
            "Warning", 
            "Once you click delete the role is gone", 
            yesText:"Delete", cancelText:"Cancel");

        if (dialogResult == false) return; // The user cancelled the action

        await using var transaction = await DbContext.Database.BeginTransactionAsync();

        try
        {
            // Remove the role from all users
            var userRoles = DbContext.UserRoles.Where(ur => ur.RoleId == role.Id);
            DbContext.UserRoles.RemoveRange(userRoles);
            await DbContext.SaveChangesAsync();

            // Delete the role itself
            DbContext.Roles.Remove(role);
            await DbContext.SaveChangesAsync();

            await transaction.CommitAsync(); // Commit the transaction if all operations were successful

            Snackbar.Add($"Role {role.Name} deleted successfully", Severity.Success);
        }
        catch (Exception ex)
        {
            await transaction.RollbackAsync(); // Rollback the transaction in case of an error

            Snackbar.Add("An error occurred while trying to delete the role: " + ex.Message, Severity.Error);
        }

        SetRoles(); // Refresh the roles list
    }

    private void SetRoles()
    {
        AllRoles = DbContext.Roles.AsNoTracking().OrderBy(x => x.Name).ToList();
    }
    
    private async Task RowClickEvent(TableRowClickEventArgs<Role> tableRowClickEventArgs)
    {
        await OpenEditRoleDialog(tableRowClickEventArgs.Item);
    }

    private async Task OpenEditRoleDialog(Role? role)
    {
        var parameters = new DialogParameters
        {
            {"Role", role}
        };
        
        var dialog = await DialogService.ShowAsync<EditRole>($"Edit {role?.Name}", parameters, _defaultDialogOptions);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            SetRoles();
            //StateHasChanged();
        }
    }

    public void Dispose()
    {
        DbContext.Dispose();
    }
}

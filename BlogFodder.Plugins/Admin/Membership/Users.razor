@page "/admin/membership/users"
@layout AdminLayout
@using BlogFodder.Core.Data
@using Humanizer
@using MediatR
@using Microsoft.EntityFrameworkCore
@using BlogFodder.Core.Membership.Models
@using BlogFodder.Plugins.Admin.Membership.Dialogs
@implements IDisposable
<PageTitle>Manage Users</PageTitle>

<MudTable Items="@AllUsers" Hover="true" OnRowClick="RowClickEvent" T="User" RowClass="rowpointer">
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Date Created</MudTh>
        <MudTh>Roles</MudTh>
        <MudTh>Delete</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.UserName</MudTd>
        <MudTd DataLabel="Date Created">@context.CreateDate.Humanize()</MudTd>
        <MudTd DataLabel="Roles">
            @foreach (var role in context.UserRoles)
            {
                @role.Role.Name
            }
        </MudTd>
        <MudTd DataLabel="Delete">
            <MudButton Color="Color.Primary" OnClick="@(() => DeleteUser(context))">Delete</MudButton>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager/>
    </PagerContent>
</MudTable>

@code {

    [Inject]
    public IDbContextFactory<BlogFodderDbContext> DbContextFactory { get; set; } = default!;

    [Inject]
    public NavigationManager NavigationManager { get; set; } = default!;

    [Inject]
    public IMediator Mediator { get; set; } = default!;

    [Inject]
    private ISnackbar Snackbar { get; set; } = default!;

    [Inject]
    private IDialogService DialogService { get; set; } = default!;

    private BlogFodderDbContext DbContext { get; set; } = default!;
    private List<User> AllUsers { get; set; } = new();
    private readonly DialogOptions _defaultDialogOptions = new() {MaxWidth = MaxWidth.Large, FullWidth = true};

    protected override void OnInitialized()
    {
        DbContext = DbContextFactory.CreateDbContext();
        SetUsers();
    }

    private async Task DeleteUser(User user)
    {
        var dialogResult = await DialogService.ShowMessageBox(
            "Warning",
            "Once you delete the user, all associated data will be permanently removed. Are you sure you want to continue?",
            yesText: "Delete",
            cancelText: "Cancel");

        if (dialogResult == false)
        {
    // The user clicked "Cancel", so don't do anything.
            return;
        }

    // If we reach here, the user clicked "Delete".
        try
        {
            DbContext.Users.Remove(user);
            await DbContext.SaveChangesAsync();

    // Refresh the users list after successful deletion.
            SetUsers();

            Snackbar.Add("User deleted successfully", Severity.Success);
        }
        catch (Exception ex)
        {
    // Handle or log the error.
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }


    private void SetUsers()
    {
        AllUsers = DbContext.Users
            .Include(x => x.UserRoles)
            .ThenInclude(x => x.Role).AsNoTracking().OrderByDescending(x => x.CreateDate).ToList();
    }

    private async Task RowClickEvent(TableRowClickEventArgs<User> tableRowClickEventArgs)
    {
    // Open up the user editor
        var parameters = new DialogParameters
        {
            {"User", tableRowClickEventArgs.Item}
        };

        var dialog = await DialogService.ShowAsync<EditUser>($"Edit {tableRowClickEventArgs.Item.UserName}", parameters, _defaultDialogOptions);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        DbContext.Dispose();
    }

}
@using BlogFodder.Core.Membership.Models
@using Microsoft.EntityFrameworkCore
@using BlogFodder.Core.Data
@using Microsoft.Extensions.DependencyInjection
<MudDialog>
    <DialogContent>
        @if (Errors.Length > 0)
        {
            <MudAlert Severity="Severity.Error" Class="my-2">
                @foreach (var error in Errors)
                {
                    <MudText>@error</MudText>
                }
            </MudAlert>
        }
        <MudForm Model="@Role" @ref="@Form" @bind-Errors="@Errors" ValidationDelay="0">
            <MudGrid Class="pb-4">
                <MudItem xs="12">
                    <MudTextField Label="Role Name" Variant="Variant.Outlined" Margin="Margin.Dense"
                                  @bind-Value="@Role.Name" For="@(() => Role.Name)"/>
                </MudItem>
            </MudGrid>
                <MudItem xs="12" Class="d-flex justify-center">
                    <MudButton Variant="Variant.Filled" OnClick="@(SubmitForm)" DisableElevation="true" Color="Color.Primary" Size="Size.Large" Class="mt-8">Save</MudButton>
                </MudItem>
        </MudForm>
    </DialogContent>
</MudDialog>

@code {

    [Parameter]
    public Role? Role { get; set; }

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = default!;
    
    [Inject] public IServiceProvider ServiceProvider { get; set; } = default!;
    
    [Inject] private ISnackbar Snackbar { get; set; } = default!;
    
    private MudForm Form { get; set; } = default!;
    private string?[] Errors { get; set; } = Array.Empty<string>();
    private bool IsNew { get; set; }
    
    protected override void OnInitialized()
    {
        if (Role == null)
        {
            IsNew = true;
            Role = new Role();
        }
    }

    private async Task SubmitForm()
    {
        using var scope = ServiceProvider.CreateScope();
        var dbContext = scope.ServiceProvider.GetRequiredService<BlogFodderDbContext>();

        try
        {
            if (IsNew)
            {
                if (await dbContext?.Roles.AnyAsync(r => r.Name == Role!.Name)!)
                {
                    Errors = new[] { $"Role with name {Role!.Name} already exists." };
                    return;
                }

                dbContext.Roles.Add(Role!);
            }
            else
            {
                dbContext?.Roles.Update(Role!);
            }

            await dbContext?.SaveChangesAsync()!;
            Snackbar.Add("Role Saved Successfully", Severity.Success);
            MudDialog.Close(DialogResult.Ok(Role));
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }

    }
}
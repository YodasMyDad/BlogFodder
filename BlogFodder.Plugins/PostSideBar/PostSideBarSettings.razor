@page "/admin/plugins/postsidebar"
@using MediatR
@using BlogFodder.Core.Plugins.Commands
@using BlogFodder.Core.Plugins.Models
@using BlogFodder.Core.Extensions
@layout AdminLayout
<PageTitle>Post Side Bar</PageTitle>
@if (Errors.Length > 0)
{
    <MudAlert Severity="Severity.Error" Class="my-2">
        @foreach (var error in Errors)
        {
            <MudText>@error</MudText>
        }
    </MudAlert>
}
<MudForm Model="@Settings" @ref="@Form" @bind-Errors="@Errors" ValidationDelay="0">
    <MudGrid Class="pb-3">
        <MudItem xs="12">
            <MudSwitch Label="Enable this plugin" Color="Color.Primary" Size="Size.Large"
                       @bind-Checked="Settings.Enabled" For="@(() => Settings.Enabled)"/>
        </MudItem>
    </MudGrid>
    <MudTabs Outlined="true" Position="Position.Top" Rounded="true" Border="true" KeepPanelsAlive="true" ApplyEffectsToContainer="true" PanelClass="pa-6">

        <MudTabPanel Text="About Box">
            <MudGrid>
                <MudItem xs="12">
                    <MudSwitch Label="Show about box" Color="Color.Primary"
                               @bind-Checked="Settings.AboutBoxEnabled"
                               For="@(() => Settings.AboutBoxEnabled)"/>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="Settings.AboutBoxTitle" For="@(() => Settings.AboutBoxTitle)" Label="About Title" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="Settings.AboutBoxText" For="@(() => Settings.AboutBoxText)" Lines="4" Label="About Text" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                </MudItem>
            </MudGrid>

        </MudTabPanel>

        <MudTabPanel Text="Latest Posts">

            <MudGrid>
                <MudItem xs="12">
                    <MudNumericField @bind-Value="Settings.LatestPostsAmount" For="@(() => Settings.LatestPostsAmount)" Label="Latest Posts (Amount To Show)" Variant="Variant.Outlined" Margin="Margin.Dense" Min="1" Max="6"/>
                </MudItem>
            </MudGrid>

        </MudTabPanel>

    </MudTabs>
    <MudItem xs="12" Class="d-flex justify-center">
        <MudButton Variant="Variant.Filled" OnClick="@(async () => await SubmitForm())" DisableElevation="true" Color="Color.Primary" Size="Size.Large" Class="mt-8">Save</MudButton>
    </MudItem>
</MudForm>

@code
{
    [Inject]
    private ISnackbar Snackbar { get; set; } = default!;

    [Inject]
    public IMediator Mediator { get; set; } = default!;

    private MudForm Form { get; set; } = default!;
    private string?[] Errors { get; set; } = Array.Empty<string>();
    private PostSideBarSettingsModel Settings { get; set; } = new();
    private CreateUpdatePluginCommand SavePluginSettingsCommand { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var plugin = await Mediator.Send(new GetPluginByAliasCommand {Alias = nameof(PostSideBarPlugin)}).ConfigureAwait(false);
        if (plugin != null)
        {
            SavePluginSettingsCommand.IsUpdate = true;
            SavePluginSettingsCommand.Plugin = plugin;

            var settings = plugin.PluginSettings?.ToType<PostSideBarSettingsModel>();
            if (settings != null)
            {
                Settings = settings;
            }

            Settings.Enabled = SavePluginSettingsCommand.Plugin.Enabled;
        }
        else
        {
            SavePluginSettingsCommand.Plugin = new Plugin
            {
                PluginAlias = nameof(PostSideBarPlugin)
            };
        }
    }

    /// <summary>
    /// Submits the form and saves the settings
    /// </summary>
    private async Task SubmitForm()
    {
        await Form.Validate();
        if (Form.IsValid)
        {
            SavePluginSettingsCommand = SavePluginSettingsCommand.ReadyToSave(Settings);

            var result = await Mediator.Send(SavePluginSettingsCommand).ConfigureAwait(false);

            Errors = SavePluginSettingsCommand.ProcessResult(result, Snackbar);
        }
    }
}
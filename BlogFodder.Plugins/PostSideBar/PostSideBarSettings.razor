@page "/admin/plugins/postsidebar"
@using MediatR
@using BlogFodder.Core.Plugins.Commands
@using BlogFodder.Core.Plugins.Models
@using BlogFodder.Core.Extensions
@using Microsoft.EntityFrameworkCore
@using BlogFodder.Core.Data
@using BlogFodder.Core.Media.Models
@using BlogFodder.Core.Providers
@using BlogFodder.Core.Shared.Models
@using Microsoft.Extensions.DependencyInjection
@layout AdminLayout
<PageTitle>Post Side Bar</PageTitle>
@if (Errors.Length > 0)
{
    <MudAlert Severity="Severity.Error" Class="my-2">
        @foreach (var error in Errors)
        {
            <MudText>@error</MudText>
        }
    </MudAlert>
}
<MudForm Model="@Settings" @ref="@Form" @bind-Errors="@Errors" ValidationDelay="0">
    <MudGrid Class="pb-3">
        <MudItem xs="12">
            <MudSwitch Label="Enable this plugin" Color="Color.Primary" Size="Size.Large"
                       @bind-Checked="Settings.Enabled" For="@(() => Settings.Enabled)"/>
        </MudItem>
    </MudGrid>
    <MudTabs Outlined="true" Position="Position.Top" Rounded="true" Border="true" KeepPanelsAlive="true" ApplyEffectsToContainer="true" PanelClass="pa-6">

        <MudTabPanel Text="About Box">
            <MudGrid>
                <MudItem xs="12">
                    <MudSwitch Label="Show about box" Color="Color.Primary"
                               @bind-Checked="Settings.AboutBoxEnabled"
                               For="@(() => Settings.AboutBoxEnabled)"/>
                </MudItem>
                <MudItem xs="12">
                    <MudField Label="About Image">
                        @if (AboutImageExisting != null)
                        {
                            <MudImage ObjectFit="ObjectFit.Cover" Width="100" Src="@($"{AboutImageExisting?.Url}?width=100")" Class="rounded"/>
                        }
                        @if (AboutImage != null)
                        {
                            <MudChip Color="Color.Default" OnClose="@(() => { AboutImage = null; })">
                                @AboutImage?.Name
                            </MudChip>
                        }
                        <MudStack Row="true">
                            <MudFileUpload T="IBrowserFile" For="@(() => AboutImage)" @bind-Files="AboutImage">
                                <ButtonTemplate>
                                    <MudButton HtmlTag="label"
                                               Variant="Variant.Filled"
                                               Color="Color.Primary"
                                               StartIcon="@Icons.Material.Filled.Image"
                                               for="@context">
                                        Upload Image
                                    </MudButton>
                                </ButtonTemplate>
                            </MudFileUpload>
                            @if (AboutImageExisting != null)
                            {
                                <MudButton Variant="Variant.Text" OnClick="@(() => AboutImageExisting = null)">Remove Image</MudButton>
                            }
                        </MudStack>
                    </MudField>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="Settings.AboutBoxImageHeight" For="@(() => Settings.AboutBoxImageHeight)" Label="Image Height" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="Settings.AboutBoxImageWidth" For="@(() => Settings.AboutBoxImageWidth)" Label="Image Width" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="Settings.AboutBoxTitle" For="@(() => Settings.AboutBoxTitle)" Label="About Title" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="Settings.AboutBoxText" For="@(() => Settings.AboutBoxText)" Lines="4" Label="About Text" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                </MudItem>
            </MudGrid>

        </MudTabPanel>

        <MudTabPanel Text="Latest Posts">

            <MudGrid>
                <MudItem xs="12">
                    <MudNumericField @bind-Value="Settings.LatestPostsAmount" For="@(() => Settings.LatestPostsAmount)" Label="Latest Posts (Amount To Show)" Variant="Variant.Outlined" Margin="Margin.Dense" Min="1" Max="6"/>
                </MudItem>
            </MudGrid>

        </MudTabPanel>

    </MudTabs>
    <MudItem xs="12" Class="d-flex justify-center">
        <MudButton Variant="Variant.Filled" OnClick="@(async () => await SubmitForm())" DisableElevation="true" Color="Color.Primary" Size="Size.Large" Class="mt-8">Save</MudButton>
    </MudItem>
</MudForm>

@code
{
    [Inject]
    public ISnackbar Snackbar { get; set; } = default!;

    [Inject]
    public ProviderService ProviderService { get; set; } = default!;

    [Inject]
    public IServiceProvider ServiceProvider { get; set; } = default!;

    private MudForm Form { get; set; } = default!;
    private string?[] Errors { get; set; } = Array.Empty<string>();
    private PostSideBarSettingsModel Settings { get; set; } = new();
    private CreateUpdatePluginCommand SavePluginSettingsCommand { get; set; } = new();
    private IBrowserFile? AboutImage { get; set; }
    private BlogFodderFile? AboutImageExisting { get; set; }
    private Guid? AboutImageExistingId { get; set; }
        private const string AboutBoxImageId = "AboutBoxImageId";

    protected override async Task OnInitializedAsync()
    {
        using var scope = ServiceProvider.CreateScope();
        var mediatr = scope.ServiceProvider.GetRequiredService<IMediator>();
        var dbContext = scope.ServiceProvider.GetRequiredService<BlogFodderDbContext>();
        var plugin = await mediatr.Send(new GetPluginByAliasCommand {Alias = nameof(PostSideBarPlugin)}).ConfigureAwait(false);
        if (plugin != null)
        {
            SavePluginSettingsCommand.IsUpdate = true;
            SavePluginSettingsCommand.Plugin = plugin;

            var settings = plugin.PluginSettings?.ToType<PostSideBarSettingsModel>();
            if (settings != null)
            {
                Settings = settings;
            }

            Settings.Enabled = SavePluginSettingsCommand.Plugin.Enabled;

    // See if there is an existing image
            if (Settings.AboutBoxImageId != null)
            {
                AboutImageExisting = await dbContext.Files.AsNoTracking().FirstOrDefaultAsync(x => x.Id == Settings.AboutBoxImageId);
                AboutImageExistingId = AboutImageExisting?.Id;
            }
        }
        else
        {
            SavePluginSettingsCommand.Plugin = new Plugin
            {
                PluginAlias = nameof(PostSideBarPlugin)
            };
        }
    }

    /// <summary>
    /// Submits the form and saves the settings
    /// </summary>
    private async Task SubmitForm()
    {
        await Form.Validate();
        if (Form.IsValid)
        {
            using var scope = ServiceProvider.CreateScope();
            var mediatr = scope.ServiceProvider.GetRequiredService<IMediator>();
            var dbContext = scope.ServiceProvider.GetRequiredService<BlogFodderDbContext>();

            // Profile Image - Need to save image and then create a file
            if (AboutImage != null)
            {
                // Save the file, create a file and attach it to the user
                var fileResult = await AboutImage.AddFileToDb(AboutBoxImageId, new HandlerResult<BlogFodderFile>(), ProviderService, dbContext);
                await dbContext.SaveChangesAsync();

                await DeleteExistingImage(dbContext);

                // Set the file to the user
                AboutImageExisting = fileResult;
                AboutImageExistingId = AboutImageExisting?.Id;
                Settings.AboutBoxImageId = AboutImageExisting?.Id;
                Settings.AboutBoxImageUrl = AboutImageExisting?.Url;
            }
            else if (AboutImageExisting == null && AboutImageExistingId != null)
            {
                // They have removed the existing image
                await DeleteExistingImage(dbContext);
            }

            SavePluginSettingsCommand = SavePluginSettingsCommand.ReadyToSave(Settings);

            var result = await mediatr.Send(SavePluginSettingsCommand).ConfigureAwait(false);
            AboutImage = null;

            Errors = SavePluginSettingsCommand.ProcessResult(result, Snackbar);
        }
    }

    private async Task DeleteExistingImage(BlogFodderDbContext dbContext)
    {
        var toDelete = dbContext.Files.FirstOrDefault(x => x.Id == AboutImageExistingId);
        if (toDelete != null) dbContext.Files.Remove(toDelete);
        await dbContext.SaveChangesAsync();
        AboutImageExisting = null;
    }
}
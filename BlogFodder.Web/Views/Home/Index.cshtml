@using Microsoft.AspNetCore.Components
@using BlogFodder.Core.Plugins.Interfaces
@{
    ViewData["Title"] = "Home Page";
    var plugins = ViewData["Plugins"] as IEnumerable<IPlugin> ?? new List<IPlugin>();
    var dataFromDb = ViewData["DbData"] as Dictionary<string, string> ?? new Dictionary<string, string>();
    var contentPlugins = plugins as IPlugin[] ?? plugins.ToArray();
}

<h2>Plugin Form</h2>
@using (Html.BeginForm("Index", "Home", FormMethod.Post))
{
    @Html.AntiForgeryToken()
    @foreach (var plugin in contentPlugins)
    {
        if (dataFromDb.ContainsKey(plugin.Alias))
        {
            <component type="plugin.Editor.Component" render-mode="ServerPrerendered"/>
        }
    }
    <button type="submit">Submit Form</button>
}

<h2>Plugins Display</h2>

@foreach (var plugin in contentPlugins)
{
    if (dataFromDb.ContainsKey(plugin.Alias))
    {
        <component type="plugin.Content.Component" render-mode="ServerPrerendered" param-Model="@dataFromDb[plugin.Alias]"/>
        @*@(await Html.RenderComponentAsync<blazinmvc.Views.Shared.Component.Component>(RenderMode.ServerPrerendered,new {  Data= " Hello World " }))*@
    }

    @*<component type="typeof(ColorfulCheckbox)" render-mode="ServerPrerendered" 
               param-Size="14" param-Color="@("blue")" />*@
}

@section Scripts
{
    @foreach (var plugin in contentPlugins)
    {
        if (dataFromDb.ContainsKey(plugin.Alias))
        {
            foreach (var jsFile in plugin.Editor.JsFiles)
            {
                <script src="@jsFile" asp-append-version="true"></script>
            }
        }
    }
}

@section Head
{
    @foreach (var plugin in contentPlugins)
    {
        if (dataFromDb.ContainsKey(plugin.Alias))
        {
            foreach (var cssFile in plugin.Editor.CssFiles)
            {
                <link rel="stylesheet" href="@cssFile" asp-append-version="true"/>
            }
        }
    }
}

@*foreach (var contentPlugin in adminPages)
        {
            if (contentPlugin != null && dataFromDb.ContainsKey(contentPlugin.Alias))
            {
                
            }
        }*@

@*@await Component.InvokeAsync("MyCustom")*@

@*<div>
    @SampleComponentInstance
</div>

//https://learn.microsoft.com/en-us/aspnet/core/mvc/views/tag-helpers/built-in/component-tag-helper?view=aspnetcore-7.0
//https://stackoverflow.com/questions/65477975/how-to-pass-a-variable-into-a-components-typeparam-in-blazor

@code{
    RenderFragment SampleComponentInstance => builder =>
    {
        var type = typeof(SampleComponent<>).MakeGenericType(new[] { MyType });
        builder.OpenComponent(1, type);
        builder.AddAttribute(2, "String", MyString);
        builder.CloseComponent();
    };

    Type MyType { get; set; } = typeof(string);
    string MyString { get; set; } = "hello";
}*@
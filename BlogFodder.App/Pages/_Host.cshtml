@page "/"
@using BlogFodder.Core.Settings
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.Extensions.Options
@using Microsoft.AspNetCore.Mvc.TagHelpers
@namespace BlogFodder.App.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@inject IOptionsSnapshot<BlogFodderSettings> Settings;
@{
    var mainSettings = Settings.Value;
}
<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <base href="~/"/>
    <link rel="icon" type="image/png" href="@mainSettings.Favicon"/>
    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered"/>
    <link rel="stylesheet" href="BlogFodder.App.styles.css" asp-append-version="true"/>
    @(await Component.InvokeAsync("EditorPluginCss"))
</head>
<body>
<component type="typeof(App)" render-mode="ServerPrerendered"/>

<div id="blazor-error-ui">
    <environment include="Staging,Production">
        An error has occurred. This application may no longer respond until reloaded.
    </environment>
    <environment include="Development">
        An unhandled exception has occurred. See browser dev tools for details.
    </environment>
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>


<script src="_framework/blazor.server.js"></script>
<script>
    // Wait until a 'reload' button appears
    new MutationObserver((mutations, observer) => {
        if (document.querySelector('#components-reconnect-modal h5')) {
            // Now every 10 seconds, see if the server appears to be back, and if so, reload
            async function attemptReload() {
                await fetch(''); // Check the server really is back
                location.reload();
            }
            observer.disconnect();
            attemptReload();
            setInterval(attemptReload, 2000);
        }
    }).observe(document.body, { childList: true, subtree: true });
</script>
@await Component.InvokeAsync("EditorPluginJs")
</body>
</html>
@page "/s/{Search}"
@using BlogFodder.Core.Plugins
@using BlogFodder.Core.Posts.Commands
@using BlogFodder.Core.Posts.Models
@using BlogFodder.Core.Settings
@using BlogFodder.Core.Settings.Models
@using BlogFodder.Core.Shared.Models
@using MediatR
@using Microsoft.Extensions.Options
@using BlogFodder.Core.Extensions
@using BlogFodder.Core.Settings.Commands
<PageTitle>Search Results</PageTitle>

@if (!Search.IsNullOrWhiteSpace())
{
    if (Posts.Items.Any())
    {
        @ExtensionManager.CreateComponent(PostListComponent, new Dictionary<string, object>
        {
            {"Posts", Posts}
        })

        @ExtensionManager.CreateComponent(PaginationComponent, new Dictionary<string, object>
        {
            {"CurrentPage", Posts.PageIndex + 1},
            {"PageCount", Posts.TotalPages},
            {
                "OnPageChanged", new Func<int, Task>(async e =>
                {
                    CurrentPage = e;
                    await GetPosts();
                })
            },
            {"ShowFirstLast", false},
            {"ShowPageNumbers", true},
            {"VisiblePages", 8},
            {"FirstText", "First"},
            {"LastText", "Last"}
        })
    }
    else
    {
        <p>Unable to find any posts</p>
    }
}
else
{
    <h1>Missing Search Term?</h1>
    <p>Sorry but there is no search term to look for.</p>
}

@code {

    [Parameter]
    public string? Search { get; set; }

    [Inject]
    public ExtensionManager ExtensionManager { get; set; } = default!;

    [Inject]
    public IServiceProvider ServiceProvider { get; set; } = default!;

    [Inject]
    IOptions<BlogFodderSettings> BlogFodderSettings { get; set; } = default!;

    private PaginatedList<Post> Posts { get; set; } = new();
    private string PostListComponent { get; set; } = "";
    private string PaginationComponent { get; set; } = "";
    private SiteSettings Settings { get; set; } = default!;
    private int CurrentPage { get; set; } = 1;
    private int PostsPerPage { get; set; } = 10;
    private string? _currentSearch;

    private async Task InitializeAsync()
    {
        using var scope = ServiceProvider.CreateScope();
        var mediatr = scope.ServiceProvider.GetRequiredService<IMediator>();
        Settings = await mediatr.Send(new GetSiteSettingsCommand()).ConfigureAwait(false);
        PostsPerPage = Settings.HomeAmountPerPage;
        await GetPosts(mediatr);
    }

    private async Task GetPosts(IMediator? mediatr = null)
    {
        var postsQuery = new GetPostsCommand(Settings)
        {
            PageIndex = CurrentPage,
            AmountPerPage = PostsPerPage,
            OrderBy = GetPostsOrderBy.DateUpdatedDescending,
            SearchTerm = Search
        };
        if (mediatr == null)
        {
            using var scope = ServiceProvider.CreateScope();
            mediatr = scope.ServiceProvider.GetRequiredService<IMediator>();
        }
        Posts = await mediatr.Send(postsQuery).ConfigureAwait(false);
        StateHasChanged();
    }

    protected override void OnParametersSet()
    {
        PostListComponent = BlogFodderSettings.Value.FrontEnd.PostListComponent!;
        PaginationComponent = BlogFodderSettings.Value.FrontEnd.PaginationComponent!;
        if (_currentSearch != Search && !Search.IsNullOrWhiteSpace())
        {
            _currentSearch = Search;
            _ = InitializeAsync();
        }
    }

}
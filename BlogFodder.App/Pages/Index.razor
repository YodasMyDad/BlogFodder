@page "/"
@using BlogFodder.Core.Data
@using BlogFodder.Core.Extensions
@using BlogFodder.Core.Plugins
@using BlogFodder.Core.Posts.Models
@using BlogFodder.Core.Settings
@using BlogFodder.Core.Shared.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Options

<PageTitle>@Settings.Value.FrontEnd.DefaultPageTitle</PageTitle>
<HeadContent>
    <meta name="description" content="@Settings.Value.FrontEnd.DefaultMetaDescription">
</HeadContent>

@ExtensionManager.CreateComponent(PostListComponent, new Dictionary<string, object>
{
    {"Posts", Posts}
})

@ExtensionManager.CreateComponent(PaginationComponent, new Dictionary<string, object>
{
    {"CurrentPage", Posts.PageIndex+1},
    {"PageCount", Posts.TotalPages},
    {"OnPageChanged", new Func<int, Task>(async e => { CurrentPage = e; await GetPosts();})},
    {"ShowFirstLast", false},
    {"ShowPageNumbers", true},
    {"VisiblePages", 8},
    {"FirstText", "First"},
    {"LastText", "Last"}
})

@*
<Pagination CurrentPage="@(Posts.PageIndex+1)"
         PageCount="@Posts.TotalPages"
         OnPageChanged="async e => { CurrentPage = e; await GetPosts();}"
         ShowFirstLast="false"
         ShowPageNumbers="true"
         VisiblePages="10"
         FirstText="First"
         LastText="Last" />    
         *@

@code
{
    [Inject]
    public BlogFodderDbContext DbContext { get; set; } = default!;

    [Inject]
    public NavigationManager NavigationManager { get; set; } = default!;
    
    [Inject]
    public ExtensionManager ExtensionManager { get; set; } = default!;
    
    [Inject]
    IOptionsSnapshot<BlogFodderSettings> Settings { get; set; } = default!;

    private PaginatedList<Post> Posts { get; set; } = new();

    private string PostListComponent { get; set; } = "";
    private string PaginationComponent { get; set; } = "";

    private int CurrentPage { get; set; } = 1;

    private async Task GetPosts()
    {
        Posts = DbContext.Posts
            .AsQueryable()
            .Include(x => x.FeaturedImage)
            .Include(x => x.Categories)
            .AsNoTracking()
            .OrderByDescending(x => x.DateUpdated)
            .ToPaginatedList(CurrentPage,1);
        
        StateHasChanged();
    }

    protected override void OnParametersSet()
    {
        PostListComponent = Settings.Value.FrontEnd.PostListComponent!;
        PaginationComponent = Settings.Value.FrontEnd.PaginationComponent!;
        GetPosts();
    }
}
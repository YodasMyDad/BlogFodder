@page "/"
@using BlogFodder.Core.Data
@using BlogFodder.Core.Extensions
@using BlogFodder.Core.Plugins
@using BlogFodder.Core.Plugins.Commands
@using BlogFodder.Core.Plugins.Models
@using BlogFodder.Core.Posts.Models
@using BlogFodder.Core.Settings
@using BlogFodder.Core.Settings.Commands
@using BlogFodder.Core.Settings.Models
@using BlogFodder.Core.Shared.Models
@using MediatR
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Options

<PageTitle>@Settings.DefaultPageTitle</PageTitle>
<HeadContent>
    <meta name="description" content="@Settings.DefaultMetaDescription">
</HeadContent>
<RenderPlugins PluginDisplayArea="PluginDisplayArea.HomeBeforeContent" />
@ExtensionManager.CreateComponent(PostListComponent, new Dictionary<string, object>
{
    {"Posts", Posts}
})

@ExtensionManager.CreateComponent(PaginationComponent, new Dictionary<string, object>
{
    {"CurrentPage", Posts.PageIndex+1},
    {"PageCount", Posts.TotalPages},
    {"OnPageChanged", new Func<int, Task>(async e => { CurrentPage = e; await GetPosts();})},
    {"ShowFirstLast", false},
    {"ShowPageNumbers", true},
    {"VisiblePages", 8},
    {"FirstText", "First"},
    {"LastText", "Last"}
})
<RenderPlugins PluginDisplayArea="PluginDisplayArea.HomeAfterContent" />
@code
{
    [Inject]
    public BlogFodderDbContext DbContext { get; set; } = default!;

    [Inject]
    public NavigationManager NavigationManager { get; set; } = default!;
    
    [Inject]
    public ExtensionManager ExtensionManager { get; set; } = default!;
    
    [Inject]
    IOptionsSnapshot<BlogFodderSettings> BlogFodderSettings { get; set; } = default!;
    
    [Inject]
    public IMediator Mediator { get; set; } = default!;

    private PaginatedList<Post> Posts { get; set; } = new();

    private string PostListComponent { get; set; } = "";
    private string PaginationComponent { get; set; } = "";
    private SiteSettings Settings { get; set; } = default!;
    private int CurrentPage { get; set; } = 1;

    private async Task GetPosts()
    {
        Posts = DbContext.Posts
            .AsQueryable()
            .Include(x => x.FeaturedImage)
            .Include(x => x.Categories)
            .AsNoTracking()
            .OrderByDescending(x => x.DateUpdated)
            .ToPaginatedList(CurrentPage,Settings.HomeAmountPerPage);
        
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        Settings = await Mediator.Send(new GetSiteSettingsCommand()).ConfigureAwait(false);
    }

    protected override void OnParametersSet()
    {
        PostListComponent = BlogFodderSettings.Value.FrontEnd.PostListComponent!;
        PaginationComponent = BlogFodderSettings.Value.FrontEnd.PaginationComponent!;
        GetPosts();
    }
}
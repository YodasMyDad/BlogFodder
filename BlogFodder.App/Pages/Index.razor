@page "/"
@using BlogFodder.Core.Plugins
@using BlogFodder.Core.Plugins.Models
@using BlogFodder.Core.Posts.Commands
@using BlogFodder.Core.Posts.Models
@using BlogFodder.Core.Settings
@using BlogFodder.Core.Settings.Commands
@using BlogFodder.Core.Settings.Models
@using BlogFodder.Core.Shared.Models
@using MediatR
@using Microsoft.Extensions.Options

<PageTitle>@Settings.DefaultPageTitle</PageTitle>
<HeadContent>
    <meta name="description" content="@Settings.DefaultMetaDescription">
</HeadContent>
<RenderPlugins PluginDisplayArea="PluginDisplayArea.HomeBeforeContent"/>

    @ExtensionManager.CreateComponent(PostListComponent, new Dictionary<string, object>
    {
        {"Posts", Posts}
    })

    @ExtensionManager.CreateComponent(PaginationComponent, new Dictionary<string, object>
    {
        {"CurrentPage", Posts.PageIndex + 1},
        {"PageCount", Posts.TotalPages},
        {
            "OnPageChanged", new Func<int, Task>(async e =>
            {
                CurrentPage = e;
                await GetPosts();
            })
        },
        {"ShowFirstLast", false},
        {"ShowPageNumbers", true},
        {"VisiblePages", 8},
        {"FirstText", "First"},
        {"LastText", "Last"}
    })   

<RenderPlugins PluginDisplayArea="PluginDisplayArea.HomeAfterContent"/>

@code
{
    [Inject] public NavigationManager NavigationManager { get; set; } = default!;
    [Inject] public ExtensionManager ExtensionManager { get; set; } = default!;
    [Inject] public IOptions<BlogFodderSettings> BlogFodderSettings { get; set; } = default!;
    [Inject] public IServiceProvider ServiceProvider { get; set; } = default!;

    private PaginatedList<Post> Posts { get; set; } = new();

    private string PostListComponent { get; set; } = "";
    private string PaginationComponent { get; set; } = "";
    private SiteSettings Settings { get; set; } = new();
    private int CurrentPage { get; set; } = 1;

    private async Task GetPosts()
    {
        var postsQuery = new GetPostsCommand(Settings.HomeAmountPerPage)
        {
            PageIndex = CurrentPage,
            OrderBy = GetPostsOrderBy.DateUpdatedDescending
        };
        using var scope = ServiceProvider.CreateScope();
        var mediatr = scope.ServiceProvider.GetRequiredService<IMediator>();
        Posts = await mediatr.Send(postsQuery);
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        PostListComponent = BlogFodderSettings.Value.FrontEnd.PostListComponent!;
        PaginationComponent = BlogFodderSettings.Value.FrontEnd.PaginationComponent!;
        using var scope = ServiceProvider.CreateScope();
        var mediatr = scope.ServiceProvider.GetRequiredService<IMediator>();
        Settings = await mediatr.Send(new GetSiteSettingsCommand());
        await GetPosts();
    }

    protected override void OnParametersSet()
    {
        PostListComponent = BlogFodderSettings.Value.FrontEnd.PostListComponent!;
        PaginationComponent = BlogFodderSettings.Value.FrontEnd.PaginationComponent!;
    }
}